// dashboard-app/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                        @id @default(autoincrement())
  email             String                     @unique @db.VarChar(255)
  passwordHash      String                     @map("password_hash") @db.VarChar(255)
  fullName          String                     @map("full_name") @db.VarChar(255)
  status            String                     @default("pending") @db.VarChar(50)
  emailVerified     Boolean                    @default(false) @map("email_verified")
  verificationToken String?                    @map("verification_token") @db.VarChar(255)
  resetToken        String?                    @map("reset_token") @db.VarChar(255)
  resetTokenExpires DateTime?                  @map("reset_token_expires")
  lastLogin         DateTime?                  @map("last_login")
  createdAt         DateTime                   @default(now()) @map("created_at")
  updatedAt         DateTime                   @updatedAt @map("updated_at")
  
  roles                  UserRole[]
  organizationalUnits    UserOrganizationalUnit[]
  uploads                UploadHistory[]
  auditLogs              AuditLog[]
  createdDashboards      Dashboard[]
  
  @@map("users")
}

model Role {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)
  description   String?  @db.Text
  isSystemRole  Boolean  @default(false) @map("is_system_role")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  permissions         RolePermission[]
  users               UserRole[]
  dashboardPermissions DashboardPermission[]
  
  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  resource    String   @db.VarChar(100)
  action      String   @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  
  roles RolePermission[]
  
  @@index([resource])
  @@index([action])
  @@map("permissions")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@map("role_permissions")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy Int?     @map("assigned_by")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@map("user_roles")
}

model OrganizationalUnit {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  type        String   @db.VarChar(50)
  parentId    Int?     @map("parent_id")
  path        String?  @db.VarChar(1000)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  parent   OrganizationalUnit?  @relation("OrgUnitHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children OrganizationalUnit[] @relation("OrgUnitHierarchy")
  users    UserOrganizationalUnit[]
  
  @@map("organizational_units")
}

model UserOrganizationalUnit {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  orgUnitId  Int      @map("org_unit_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationalUnit OrganizationalUnit @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  
  @@map("user_organizational_units")
}

model Dashboard {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  layout      Json?
  isActive    Int      @default(1) @map("is_active")
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  creator     User                   @relation(fields: [createdBy], references: [id])
  tabs        DashboardTab[]
  permissions DashboardPermission[]
  
  @@map("dashboards")
}

model DashboardTab {
  id          Int      @id @default(autoincrement())
  dashboardId Int      @map("dashboard_id")
  name        String   @db.VarChar(255)
  order       Int      @default(0)
  config      Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  dashboard      Dashboard        @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  visualizations Visualization[]
  
  @@map("dashboard_tabs")
}

model Visualization {
  id          Int      @id @default(autoincrement())
  tabId       Int      @map("tab_id")
  type        String   @db.VarChar(100)
  title       String?  @db.VarChar(255)
  config      Json
  query       String?  @db.Text
  order       Int      @default(0)
  refreshRate Int      @default(0) @map("refresh_rate")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  tab DashboardTab @relation(fields: [tabId], references: [id], onDelete: Cascade)
  
  @@map("visualizations")
}

model DashboardPermission {
  id              Int      @id @default(autoincrement())
  dashboardId     Int      @map("dashboard_id")
  roleId          Int      @map("role_id")
  permissionsJson Json     @map("permissions_json")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@map("dashboard_permissions")
}

model DataModel {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  displayName String   @map("display_name") @db.VarChar(255)
  description String?  @db.Text
  schemaJson  Json     @map("schema_json")
  version     Int      @default(1)
  isActive    Int      @default(1) @map("is_active")
  tableName   String?  @map("table_name") @db.VarChar(255)
  createdBy   Int?     @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  uploads              UploadHistory[]
  sourceRelationships  DataRelationship[] @relation("SourceModel")
  targetRelationships  DataRelationship[] @relation("TargetModel")
  
  @@map("data_models")
}

model DataRelationship {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  sourceModelId Int      @map("source_model_id")
  targetModelId Int      @map("target_model_id")
  type          String   @db.VarChar(50)
  config        Json
  isActive      Int      @default(1) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  sourceModel DataModel @relation("SourceModel", fields: [sourceModelId], references: [id], onDelete: Cascade)
  targetModel DataModel @relation("TargetModel", fields: [targetModelId], references: [id], onDelete: Cascade)
  
  @@map("data_relationships")
}

model UploadHistory {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  modelId        Int?      @map("model_id")
  fileName       String    @map("file_name") @db.VarChar(500)
  filePath       String?   @map("file_path") @db.VarChar(1000)
  fileSize       BigInt?   @map("file_size")
  status         String    @db.VarChar(50)
  recordsCount   Int?      @default(0) @map("records_count")
  recordsSuccess Int?      @default(0) @map("records_success")
  recordsFailed  Int?      @default(0) @map("records_failed")
  errorLog       String?   @map("error_log") @db.Text
  metadata       String?   @db.Text
  transactionId  String?   @map("transaction_id") @db.VarChar(100)
  createdAt      DateTime  @default(now()) @map("created_at")
  completedAt    DateTime? @map("completed_at")
  
  user      User       @relation(fields: [userId], references: [id])
  dataModel DataModel? @relation(fields: [modelId], references: [id])
  
  @@index([transactionId])
  @@map("upload_history")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String   @db.VarChar(100)
  resource   String   @db.VarChar(100)
  resourceId Int?     @map("resource_id")
  details    String?  @db.Text
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.VarChar(500)
  status     String   @default("success") @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at")
  
  user User? @relation(fields: [userId], references: [id])
  
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}